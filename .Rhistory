return(result.list)
}
describe(df, "Sex")
describe <- function(df, group=NA){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
n=1
result.list <- list()
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
result.list <- list(result.list,
prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
return(result.list)
}
describe(df, "Sex")
describe <- function(df, group=NA){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
n=1
result.list <- list()
for (i in df.list){
# print(prettyR::describe(i, xname=levels(df[,group])[n]))
result.list <- list(result.list,
prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
return(result.list)
}
describe(df, "Sex")
a <- describe(df, "Sex")
describe <- function(df, group=NA){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
}
describe(df, "Sex")
describe <- function(df, group=NA){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
}
describe(df)
group=NA
is.na(group)
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
} else{
df.list <- list(df)
}
describe <- function(df, group=NA){
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
} else{
df.list <- list(df)
}
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
}
describe(df)
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
} else{
df.list <- list(df)
}
describe <- function(df, group=NA){
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
} else{
df.list <- c(df)
}
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
}
describe(df)
describe <- function(df, group=NA){
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
} else{
print(prettyR::describe(df))
}
}
describe(df)
describe <- function(df, group=NA){
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
} else{
print(prettyR::describe(df))
}
}
library(neuropsychology)
df <- personality
df %>% select(Age, Sex, Laterality, Antagonism) %>% describe()
library(dplyr)
df %>% select(Age, Sex, Laterality, Antagonism) %>% describe()
df %>% select(Age, Sex, Mood_Disorder, Antagonism) %>% describe()
df %>% select(Age, Sex, Mood_Disorder, Antagonism, Extraversion) %>% describe()
sessionInfo()
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R")
library("neuropsychology")
describe(df)
describe <- function(df, group=NA){
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
} else{
print(prettyR::describe(df))
}
}
describe(df)
describe(personality)
describe(personality)
describe <- function(df, group=NA){
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
} else{
print(prettyR::describe(df, horizontal=TRUE))
}
}
describe(personality)
describe <- function(df, group=NA){
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
} else{
print(prettyR::describe(df, horizontal=FALSE))
}
}
describe(personality)
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R")
library("neuropsychology")
personality %>%
filter(Mood_Disorder==FALSE) %>%
select(Sex, Antagonism, Negative_Affect, Extraversion) %>%
describe(group="Sex")
personality %>%
filter(Mood_Disorder==FALSE)
?dplyr::filter
personality %>%
filter(Mood_Disorder=="absence") %>%
select(Sex, Antagonism, Negative_Affect, Extraversion) %>%
describe(group="Sex")
personality %>%
filter(Mood_Disorder=="Absence") %>%
select(Sex, Antagonism, Negative_Affect, Extraversion) %>%
describe(group="Sex")
n=1
n=+1
n=+1
n=+1
describe <- function(df, group=NA){
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=n+1
}
} else{
print(prettyR::describe(df, horizontal=FALSE))
}
}
personality %>%
filter(Mood_Disorder=="Absence") %>%
select(Sex, Antagonism, Negative_Affect, Extraversion) %>%
describe(group="Sex")
a <- df[,-"Sex"]
a <- df[-"Sex"]
group="Sex"
i <- df
i <- personality
i <- i[ , !(names(i) %in% group)]
describe <- function(df, group=NA){
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
n=1
for (i in df.list){
i <- i[ , !(names(i) %in% group)]
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=n+1
}
} else{
print(prettyR::describe(df, horizontal=FALSE))
}
}
personality %>%
filter(Mood_Disorder=="Absence") %>%
select(Sex, Antagonism, Negative_Affect, Extraversion) %>%
describe(group="Sex")
describe(df)
describe(personality)
personality %>%
filter(Mood_Disorder=="Absence") %>%
select(Sex, Antagonism, Negative_Affect, Extraversion) %>%
describe(group="Sex")
data.frame("pop"=c(2,3))
mean=0
sd=1
score<-3
population <- rnorm(10000, mean=mean, sd=sd)
df <- data.frame("pop"=population)
population <- rnorm(50000, mean=mean, sd=sd)
df <- data.frame("pop"=population)
plot <- ggplot(df, aes(y=pop)) +
geom_density(fill=colour.fill, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score,size = 2, color=colour.line) +
xlab("\nScore") +
ylab("Distribution\n")
library(ggplot2)
plot <- ggplot(df, aes(y=pop)) +
geom_density(fill=colour.fill, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score,size = 2, color=colour.line) +
xlab("\nScore") +
ylab("Distribution\n")
colour.fill="#2196F3"
colour.line="#E91E63"
plot <- ggplot(df, aes(y=pop)) +
geom_density(fill=colour.fill, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score,size = 2, color=colour.line) +
xlab("\nScore") +
ylab("Distribution\n")
ggplot(df, aes(y="pop")) +
geom_density(fill=colour.fill, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score,size = 2, color=colour.line) +
xlab("\nScore") +
ylab("Distribution\n")
ggplot(df, aes(y=pop)) +
geom_density(fill=colour.fill, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score,size = 2, color=colour.line) +
xlab("\nScore") +
ylab("Distribution\n")
ggplot(df, aes(pop)) +
geom_density(fill=colour.fill, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score,size = 2, color=colour.line) +
xlab("\nScore") +
ylab("Distribution\n")
ggplot(df, aes(z=pop)) +
geom_density(fill=colour.fill, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score,size = 2, color=colour.line) +
xlab("\nScore") +
ylab("Distribution\n")
ggplot(df, aes("pop")) +
geom_density(fill=colour.fill, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score,size = 2, color=colour.line) +
xlab("\nScore") +
ylab("Distribution\n")
ggplot(df, aes(pop)) +
geom_density(fill=colour.fill, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score,size = 2, color=colour.line) +
xlab("\nScore") +
ylab("Distribution\n")
ggplot(df, aes_string("pop")) +
geom_density(fill=colour.fill, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score,size = 2, color=colour.line) +
xlab("\nScore") +
ylab("Distribution\n")
score=2
ggplot(df, aes_string("pop")) +
geom_density(fill=colour.fill, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score,size = 2, color=colour.line) +
xlab("\nScore") +
ylab("Distribution\n")
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R", dependencies=TRUE)
library(neuropsychology)
df <- personality
figure <- assess(87, mean=100, sd=15)
assess <- function(score, mean=0, sd=1, population=NA, language="en", colour.line="#E91E63", colour.fill="#2196F3"){
if(length(population)==1){population <- rnorm(50000, mean=mean, sd=sd)}
df <- data.frame("pop"=population)
plot <- ggplot(df, aes_string("pop")) +
geom_density(fill=colour.fill, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score,size = 2, color=colour.line) +
xlab("\nScore") +
ylab("Distribution\n") +
theme_neuropsychology()
percentile <- ecdf(population)
percentile <- percentile(score)
if(percentile<0.50){
percentile <- 1-percentile
comparison <- "smaller"
}else{comparison <- "greater"}
if(language=="fr"){
if(comparison=="smaller"){
comparison <- "inferieur"
}else{comparison <- "superieur"}
print(paste("Le participant (score = ",
score,
") se situe a ",
as.character(round((score-mean(population))/sd(population), 2)),
" ecarts-types de la moyenne (M = ",
as.character(round(mean(population),2)),
", ecart-type = ",
as.character(round(sd(population),2)),
")", sep=""))
print(paste("Le score du participant est",
comparison,
"a",
as.character((round(percentile*100, 2))),
"% de la population generale."))
}else{
print(paste("The participant (score = ",
score,
") is positioned at ",
as.character(round((score-mean(population))/sd(population), 2)),
" standard deviations from the mean (M = ",
as.character(round(mean(population),2)),
", SD = ",
as.character(round(sd(population),2)),
").\n",
"The participant's score is ",
comparison,
" than ",
as.character((round(percentile*100, 2))),
" % of the general population.", sep=""))
}
return(plot)
}
figure <- assess(87, mean=100, sd=15)
assess <- function(score, mean=0, sd=1, population=NA, language="en", colour.line="#E91E63", colour.fill="#2196F3"){
if(length(population)==1){population <- rnorm(50000, mean=mean, sd=sd)}
df <- data.frame("pop"=population)
plot <- ggplot(df, aes_string("pop")) +
geom_density(fill=colour.fill, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score,size = 2, color=colour.line) +
xlab("\nScore") +
ylab("Distribution\n") +
theme_neuropsychology()
percentile <- ecdf(population)
percentile <- percentile(score)
if(percentile<0.50){
percentile <- 1-percentile
comparison <- "smaller"
}else{comparison <- "greater"}
if(language=="fr"){
if(comparison=="smaller"){
comparison <- "inferieur"
}else{comparison <- "superieur"}
print(paste("Le participant (score = ",
score,
") se situe a ",
as.character(round((score-mean(population))/sd(population), 2)),
" ecarts-types de la moyenne (M = ",
as.character(round(mean(population),2)),
", ecart-type = ",
as.character(round(sd(population),2)),
")", sep=""))
print(paste("Le score du participant est",
comparison,
"a",
as.character((round(percentile*100, 2))),
"% de la population generale."))
}else{
print(paste("The participant (score = ",
score,
") is positioned at ",
as.character(round((score-mean(population))/sd(population), 2)),
" standard deviations from the mean (M = ",
as.character(round(mean(population),2)),
", SD = ",
as.character(round(sd(population),2)),
").\\",
"The participant's score is ",
comparison,
" than ",
as.character((round(percentile*100, 2))),
" % of the general population.", sep=""))
}
return(plot)
}
figure <- assess(87, mean=100, sd=15)
assess <- function(score, mean=0, sd=1, population=NA, language="en", colour.line="#E91E63", colour.fill="#2196F3"){
if(length(population)==1){population <- rnorm(50000, mean=mean, sd=sd)}
df <- data.frame("pop"=population)
plot <- ggplot(df, aes_string("pop")) +
geom_density(fill=colour.fill, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score,size = 2, color=colour.line) +
xlab("\nScore") +
ylab("Distribution\n") +
theme_neuropsychology()
percentile <- ecdf(population)
percentile <- percentile(score)
if(percentile<0.50){
percentile <- 1-percentile
comparison <- "smaller"
}else{comparison <- "greater"}
if(language=="fr"){
if(comparison=="smaller"){
comparison <- "inferieur"
}else{comparison <- "superieur"}
print(paste("Le participant (score = ",
score,
") se situe a ",
as.character(round((score-mean(population))/sd(population), 2)),
" ecarts-types de la moyenne (M = ",
as.character(round(mean(population),2)),
", ecart-type = ",
as.character(round(sd(population),2)),
"). ",
"Le score du participant est ",
comparison,
" a ",
as.character((round(percentile*100, 2))),
" % de la population generale.", sep=""))
}else{
print(paste("The participant (score = ",
score,
") is positioned at ",
as.character(round((score-mean(population))/sd(population), 2)),
" standard deviations from the mean (M = ",
as.character(round(mean(population),2)),
", SD = ",
as.character(round(sd(population),2)),
"). ",
"The participant's score is ",
comparison,
" than ",
as.character((round(percentile*100, 2))),
" % of the general population.", sep=""))
}
return(plot)
}
figure <- assess(87, mean=100, sd=15)
assess(score=27, population=personality$Age)
figure <- assess(87, mean=100, sd=15)
ggsave("assess_plot.png", figure, dpi=600,
scale=1.2)
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R", dependencies=TRUE)
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R", dependencies=TRUE)
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R", dependencies=TRUE)
install.packages("devtools")
install.packages("devtools")
library(neuropsychology)
assess(27, population=personality$Age)
population=personality$Age
score=27
df <- data.frame("pop"=population)
View(df)
as.character(round((score-mean(population))/sd(population), 2))
sd(population)
as.character(round((score-mean(population, na.rm=TRUE))/sd(population, na.rm=TRUE), 2))
