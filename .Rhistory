colors=c("#E91E63", "white", "#03A9F4"),
hc.order = TRUE,
p.mat = p.mat,
insig="pch",
legend.title="",
lab = FALSE)
if (plot.result==TRUE){
print(plot)
}
if (returns=="table"){
return(table)
}
else{
return(plot)
}
}
cortable(personality)
?ggsave
ggsave("cortable_plot.svg", cortable(personality, returns="plot"))
ggsave("cortable_plot.png", cortable(personality, returns="plot"))
ggsave("cortable_plot.pdf", cortable(personality, returns="plot"))
cortable <- function(df,
correction="holm",
type="pearson",
returns="table",
print.result=TRUE,
plot.result=TRUE,
iamaboringperson=FALSE){
type <- ifelse(type == "s", "spearman",
ifelse(type == "spearman", "spearman","pearson"))
correction_text <- ifelse(correction=="holm", "Holm-Bonferroni",
ifelse(correction=="fdr", "False Discovery Rate",correction))
if(length(names(df)) > 15 && correction=="none" && iamaboringperson==FALSE){
warning("We've detected that you are running a lot (> 15) of correlation tests without adjusting the p values.
To help you in your p fishing, we've added some cool variables:
You never know, you might find something significant and get to publish this paper!
\nTo deactivate this, change the 'iamaboringperson' argument to TRUE.
Cheers.")
df$Local_Air_Density <- rnorm(nrow(df), mean=47, sd=12)
df$Number_of_Reproducing_Frogs <- runif(nrow(df), max=100)
df$Researchers_Hapinness <- rnorm(nrow(df), mean=0, sd=1)
df$Aliens_Motherships_Distance <- rnorm(nrow(df), mean=50000, sd=5000)
df$Gods_Desctrutive_Power <- runif(nrow(df), max=10)
}
for (i in names(df)){
if (is.numeric(df[,i]) == FALSE){
df[,i] = NULL
}
}
dimnames <- names(df)
df <- as.matrix(df)
R <- rcorr(df, type = type)$r
p <- rcorr(df, type = type)$P
p <- p.adjust(p, method = correction)
p.mat <- matrix(p, ncol = ncol(R), dimnames = list(dimnames,dimnames))
## define notions for significance levels; spacing is important.
mystars <- ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "* ", " ")))
## trunctuate the matrix that holds the correlations to two decimal
R <- format(round(cbind(rep(-1.11, ncol(df)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
table <- matrix(paste(R, mystars, sep=""), ncol=ncol(df))
diag(table) <- paste(diag(R), " ", sep="")
rownames(table) <- colnames(df)
colnames(table) <- paste(colnames(df), "", sep="")
## remove upper triangle
table <- as.matrix(table)
table[upper.tri(table, diag = TRUE)] <- NA
table <- as.data.frame(table)
## remove last column and return the matrix (which is now a data frame)
table <- cbind(table[1:length(table)-1])
if (print.result==TRUE){
print(paste("A ", type, "'s correlation matrix (correction: ", correction_text, ")", sep = ""))
print(table)
}
plot <- ggcorrplot(rcorr(df, type = type)$r,
title = paste("A ", type, "'s correlation matrix (correction: ", correction_text, ")\n", sep = ""),
method = "circle",
type="lower",
colors=c("#E91E63", "white", "#03A9F4"),
hc.order = TRUE,
p.mat = p.mat,
insig="pch",
legend.title="",
lab = FALSE)
if (plot.result==TRUE){
print(plot)
}
if (returns=="table"){
return(table)
}
}
ggsave("cortable_plot.pdf", cortable(personality, returns="plot"))
ggsave("cortable_plot.svg", cortable(personality, returns="plot"))
ggsave("cortable_plot.png", cortable(personality, returns="plot"), dpi=600)
library(neuropsychology)
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R")
library("neuropsychology")
df <- personality
df$Salary <- as.factor(df$Salary)
df$Study_Level <- as.factor(df$Study_Level)
summary(df)
cortable(df)
setwd("C:/Users/Dom/Desktop")
matable <- cortable(df)
write.csv2(matable, "matable.csv")
matable <- cortable(df)
mongraphique <- cortable(df, returns="plot")
mongraphique <- cortable(df, returns="plot")
?cortable
cortable(df, returns="plot")
mongraphique <- cortable(df, returns="plot")
cortable <- function(df,
correction="holm",
type="pearson",
returns="table",
print.result=TRUE,
plot.result=TRUE,
iamaboringperson=FALSE){
type <- ifelse(type == "s", "spearman",
ifelse(type == "spearman", "spearman","pearson"))
correction_text <- ifelse(correction=="holm", "Holm-Bonferroni",
ifelse(correction=="fdr", "False Discovery Rate",correction))
if(length(names(df)) > 15 && correction=="none" && iamaboringperson==FALSE){
warning("We've detected that you are running a lot (> 15) of correlation tests without adjusting the p values.
To help you in your p fishing, we've added some cool variables:
You never know, you might find something significant and get to publish this paper!
\nTo deactivate this, change the 'iamaboringperson' argument to TRUE.
Cheers.")
df$Local_Air_Density <- rnorm(nrow(df), mean=47, sd=12)
df$Number_of_Reproducing_Frogs <- runif(nrow(df), max=100)
df$Researchers_Hapinness <- rnorm(nrow(df), mean=0, sd=1)
df$Aliens_Motherships_Distance <- rnorm(nrow(df), mean=50000, sd=5000)
df$Gods_Desctrutive_Power <- runif(nrow(df), max=10)
}
for (i in names(df)){
if (is.numeric(df[,i]) == FALSE){
df[,i] = NULL
}
}
dimnames <- names(df)
df <- as.matrix(df)
R <- rcorr(df, type = type)$r
p <- rcorr(df, type = type)$P
p <- p.adjust(p, method = correction)
p.mat <- matrix(p, ncol = ncol(R), dimnames = list(dimnames,dimnames))
## define notions for significance levels; spacing is important.
mystars <- ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "* ", " ")))
## trunctuate the matrix that holds the correlations to two decimal
R <- format(round(cbind(rep(-1.11, ncol(df)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
table <- matrix(paste(R, mystars, sep=""), ncol=ncol(df))
diag(table) <- paste(diag(R), " ", sep="")
rownames(table) <- colnames(df)
colnames(table) <- paste(colnames(df), "", sep="")
## remove upper triangle
table <- as.matrix(table)
table[upper.tri(table, diag = TRUE)] <- NA
table <- as.data.frame(table)
## remove last column and return the matrix (which is now a data frame)
table <- cbind(table[1:length(table)-1])
if (print.result==TRUE){
print(paste("A ", type, "'s correlation matrix (correction: ", correction_text, ")", sep = ""))
print(table)
}
plot <- ggcorrplot(rcorr(df, type = type)$r,
title = paste("A ", type, "'s correlation matrix (correction: ", correction_text, ")\n", sep = ""),
method = "circle",
type="lower",
colors=c("#E91E63", "white", "#03A9F4"),
hc.order = TRUE,
p.mat = p.mat,
insig="pch",
legend.title="",
lab=FALSE) +
theme(plot.title = element_text(hjust = 0.7))
if (plot.result==TRUE){
print(plot)
}
if (returns=="table"){
return(table)
}
else{
return(plot)
}
}
mongraphique <- cortable(df, returns="plot")
ggsave("mongraphique.png", mongraphique)
mongraphique <- cortable(df, returns="plot")
ggsave("mongraphique.png", mongraphique)
ggsave("mongraphique.png", mongraphique, dpi=600)
setwd("D:/Programs/Dropbox/RECHERCHE/DOCUMENTS/R_packages/neuropsychology.R")
source("preprocessing.R")
library(lme4)
library(MuMIn)
library(optimx)
library(psych)
library("devtools")
install_github("neuropsychology/neuropsychology.R", dependencies=TRUE)
library(prettyR)
sessionInfo()
parse("dupa")
a <- 3
parse("a")
paste("a")
eval("a")
eval(parse(text="a"))
eval(parse("a"))
library(neuropsychology)
spplit(personality, Sex)
split(personality, Sex)
split(personality, personality$Sex)
a <- split(personality, personality$Sex)
describe <- function(df, group=NA, horizontal=FALSE){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
for (i in df.list){
prettyR::describe(i, horizontal=horizontal)
}
}
df <- personality
describe(df, "Sex")
describe <- function(df, group=NA, horizontal=FALSE){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
for (i in 1:df.list){
prettyR::describe(i, horizontal=horizontal)
}
}
describe(df, "Sex")
describe <- function(df, group=NA, horizontal=FALSE){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
for (i in 1:df.list){
print(i)
prettyR::describe(i, horizontal=horizontal)
}
}
describe(df, "Sex")
describe <- function(df, group=NA, horizontal=FALSE){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
for (i in df.list){
print(i)
# prettyR::describe(i, horizontal=horizontal)
}
}
describe(df, "Sex")
describe <- function(df, group=NA, horizontal=FALSE){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
for (i in df.list){
print(i)
print(prettyR::describe(i, horizontal=horizontal))
}
}
describe(df, "Sex")
describe <- function(df, group=NA, horizontal=FALSE){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
for (i in df.list){
print(prettyR::describe(i, horizontal=horizontal))
}
}
describe(df, "Sex")
?prettyR::describe
levels(df$Sex)
describe <- function(df, group=NA, horizontal=FALSE){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
n=1
for (i in df.list){
print(prettyR::describe(i, horizontal=horizontal, xname=levels(df[group])[n]))
n=+1
}
}
describe(df, "Sex")
describe <- function(df, group=NA, horizontal=FALSE){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
n=1
for (i in df.list){
print(prettyR::describe(i, horizontal=horizontal, xname=levels(df[group])[1]))
n=+1
}
}
?prettyR::describe
describe(df, "Sex")
group="Sex"
levels(df[group])[1]
levels(df[group])
levels(df[,group])
describe <- function(df, group=NA, horizontal=FALSE){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
n=1
for (i in df.list){
print(prettyR::describe(i, horizontal=horizontal, xname=levels(df[,group])[n]))
n=+1
}
}
describe(df, "Sex")
describe(df, "Sex", T)
describe <- function(df, group=NA){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
n=1
result.list <- list()
for (i in df.list){
result.list <- list(result.list,
levels(df[,group])[n]=prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
}
describe <- function(df, group=NA){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
n=1
result.list <- list()
for (i in df.list){
result.list <- list(result.list,
prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
}
a <- describe(df, "Sex")
describe(df, "Sex")
describe <- function(df, group=NA){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
n=1
result.list <- list()
for (i in df.list){
print(describe(i, xname=levels(df[,group])[n]))
result.list <- list(result.list,
prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
return(result.list)
}
describe(df, "Sex")
describe <- function(df, group=NA){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
n=1
result.list <- list()
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
result.list <- list(result.list,
prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
return(result.list)
}
describe(df, "Sex")
describe <- function(df, group=NA){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
n=1
result.list <- list()
for (i in df.list){
# print(prettyR::describe(i, xname=levels(df[,group])[n]))
result.list <- list(result.list,
prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
return(result.list)
}
describe(df, "Sex")
a <- describe(df, "Sex")
describe <- function(df, group=NA){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
}
describe(df, "Sex")
describe <- function(df, group=NA){
if(is.na(group)==F){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
}
describe(df)
group=NA
is.na(group)
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
}
else{
df.list <- list(df)
}
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
} else{
df.list <- list(df)
}
describe <- function(df, group=NA){
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
} else{
df.list <- list(df)
}
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
}
describe(df)
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
} else{
df.list <- list(df)
}
describe <- function(df, group=NA){
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
} else{
df.list <- c(df)
}
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
}
describe(df)
describe <- function(df, group=NA){
if(is.na(group)==FALSE){
df.list <- split(df, df[group])
n=1
for (i in df.list){
print(prettyR::describe(i, xname=levels(df[,group])[n]))
n=+1
}
} else{
print(prettyR::describe(df))
}
}
describe(df)
