"). ",
"The participant's score is ",
comparison,
" than ",
as.character((round(percentile*100, 2))),
" % of the general population.", sep=""))
}
return(plot)
}
figure <- assess(87, mean=100, sd=15)
assess(score=27, population=personality$Age)
figure <- assess(87, mean=100, sd=15)
ggsave("assess_plot.png", figure, dpi=600,
scale=1.2)
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R", dependencies=TRUE)
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R", dependencies=TRUE)
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R", dependencies=TRUE)
install.packages("devtools")
install.packages("devtools")
library(neuropsychology)
assess(27, population=personality$Age)
population=personality$Age
score=27
df <- data.frame("pop"=population)
View(df)
as.character(round((score-mean(population))/sd(population), 2))
sd(population)
as.character(round((score-mean(population, na.rm=TRUE))/sd(population, na.rm=TRUE), 2))
APAze <- function(fit, method="boot", nsim=1000, ddf=NULL){
varsnames <- all.vars(terms(fit))
# lme4 and lmerTest -----------------------------------------------------------------
if(class(fit)[1]=="lmerMod" | class(fit)[1]=="merModLmerTest"){
R2 <- MuMIn::r.squaredGLMM(fit)
confint <- confint(fit, method=method, nsim=nsim, oldNames=F)
# It would be nice to have this to automatically switch to Wald estimation
# of confint in the case of eventual warnings. But I have no idea how
# to catch those...
if(!is.null(ddf) & inherits(fit, "merModLmerTest")){
coefs <- data.frame(coef(summary(fit, ddf=ddf)))
}else{
coefs <- data.frame(coef(summary(fit)))
}
# This doesn't seem to work because of the "ddf". It says object ddf not found.
# coefs <- data.frame(coef(summary(fit)))
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
if(inherits(fit, "glmerMod")){
p_list <- coefs$Pr...z..
} else if("Pr...t.." %in% colnames(coefs)){
p_list <- coefs$Pr...t..
}else{
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
}
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value","z.value"))]
coefs <- round(coefs,2)
coefs$p <- round(p_list,3)
p <- ifelse(coefs$p < .001, "< .001",
ifelse(coefs$p < .01, "< .01",
ifelse(coefs$p < .05, "< .05",
ifelse(coefs$p >= 1.00, ">= 1.00",
paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" successfully converged and explained ",
substring(as.character(format(round(R2[2], 2), nsmall=2)), 3),
"% of the variance of the endogen (the conditional R2). ",
"The variance explained by the fixed effects was of ",
substring(as.character(format(round(R2[1], 2), nsmall=2)), 3),
"% (the marginal R2) and the one explained by the random effects of ",
substring(as.character(format(round(R2[2]-R2[1], 2), nsmall=2)), 3),
"%.", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
# Else --------------------------------------------------------------------
else if(class(fit)[1]=="lm"){
confint <- confint(fit)
coefs <- data.frame(coef(summary(fit)))
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value"))]
coefs <- round(coefs,2)
coefs$p <- round(p_list,3)
p <- ifelse(coefs$p < .001, "< .001",
ifelse(coefs$p < .01, "< .01",
ifelse(coefs$p < .05, "< .05",
ifelse(coefs$p >= 1.00, ">= 1.00",
paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" explained ",
substring(as.character(format(round(summary(fit)$r.squared, 2), nsmall=2)), 3),
"% of the variance of the endogen (R2).", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
else{
print(paste("Function not available yet for object of class", class(fit)[1]))
}
}
fit_lmer <- lme4::lmer(Age~BMI + (1|Sex), data=personality)
fit_lmertest <- lmerTest::lmer(Age~BMI + (1|Sex), data=personality)
APAze(fit_lmer, method="Wald")
APAze(fit_lmertest, method="Wald")
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R", dependencies=TRUE)
library(neuropsychology)
APAze <- function(fit, method="boot", nsim=1000, ddf=NULL){
varsnames <- all.vars(terms(fit))
# lme4 and lmerTest -----------------------------------------------------------------
if(class(fit)[1]=="lmerMod" | class(fit)[1]=="merModLmerTest"){
R2 <- MuMIn::r.squaredGLMM(fit)
confint <- confint(fit, method=method, nsim=nsim, oldNames=F)
# It would be nice to have this to automatically switch to Wald estimation
# of confint in the case of eventual warnings. But I have no idea how
# to catch those...
if(!is.null(ddf) & inherits(fit, "merModLmerTest")){
coefs <- data.frame(coef(summary(fit, ddf=ddf)))
}else{
coefs <- data.frame(coef(summary(fit)))
}
# This doesn't seem to work because of the "ddf". It says object ddf not found.
# coefs <- data.frame(coef(summary(fit)))
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
if(inherits(fit, "glmerMod")){
p_list <- coefs$Pr...z..
} else if("Pr...t.." %in% colnames(coefs)){
p_list <- coefs$Pr...t..
}else{
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
}
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value","z.value"))]
coefs <- round(coefs,2)
coefs$p <- round(p_list,3)
p <- ifelse(coefs$p < .001, "< .001",
ifelse(coefs$p < .01, "< .01",
ifelse(coefs$p < .05, "< .05",
ifelse(coefs$p >= 1.00, ">= 1.00",
paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" successfully converged and explained ",
substring(as.character(format(round(R2[2], 2), nsmall=2)), 3),
"% of the variance of the endogen (the conditional R2). ",
"The variance explained by the fixed effects was of ",
substring(as.character(format(round(R2[1], 2), nsmall=2)), 3),
"% (the marginal R2) and the one explained by the random effects of ",
substring(as.character(format(round(R2[2]-R2[1], 2), nsmall=2)), 3),
"%.", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
# Else --------------------------------------------------------------------
else if(class(fit)[1]=="lm"){
confint <- confint(fit)
coefs <- data.frame(coef(summary(fit)))
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value"))]
coefs <- round(coefs,2)
coefs$p <- round(p_list,3)
p <- ifelse(coefs$p < .001, "< .001",
ifelse(coefs$p < .01, "< .01",
ifelse(coefs$p < .05, "< .05",
ifelse(coefs$p >= 1.00, ">= 1.00",
paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" explained ",
substring(as.character(format(round(summary(fit)$r.squared, 2), nsmall=2)), 3),
"% of the variance of the endogen (R2).", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
else{
print(paste("Function not available yet for object of class", class(fit)[1]))
}
}
library(lmerTest)
fit_lmer <- lme4::lmer(Age~BMI + (1|Sex), data=personality)
fit_lmertest <- lmerTest::lmer(Age~BMI + (1|Sex), data=personality)
APAze(fit_lmer, method="Wald")
APAze(fit_lmertest, method="Wald")
round_p <- function(p, add.stars=TRUE){
if(add.stars==FALSE){
p <- ifelse(coefs$p < .001, "< .001",
ifelse(coefs$p < .01, "< .01",
ifelse(coefs$p < .05, "< .05",
ifelse(coefs$p >= 1.00, ">= 1.00",
paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
} else{
p <- ifelse(coefs$p < .001, "< .001***",
ifelse(coefs$p < .01, "< .01**",
ifelse(coefs$p < .05, "< .05*",
ifelse(coefs$p >= 1.00, ">= 1.00",
paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), "°", sep="")))))
}
}
p = 0.7
round_p(p)
round_p <- function(p, add.stars=TRUE){
if(add.stars==FALSE){
p <- ifelse(p < .001, "< .001",
ifelse(p < .01, "< .01",
ifelse(p < .05, "< .05",
ifelse(p >= 1.00, ">= 1.00",
paste("= ", substring(as.character(format(round(p, 2), nsmall=2)), 2), sep="")))))
} else{
p <- ifelse(coefs$p < .001, "< .001***",
ifelse(coefs$p < .01, "< .01**",
ifelse(coefs$p < .05, "< .05*",
ifelse(coefs$p >= 1.00, ">= 1.00",
paste("= ", substring(as.character(format(round(p, 2), nsmall=2)), 2), "°", sep="")))))
}
}
round_p(p)
round_p <- function(p, add.stars=TRUE){
if(add.stars==FALSE){
p <- ifelse(p < .001, "< .001",
ifelse(p < .01, "< .01",
ifelse(p < .05, "< .05",
ifelse(p >= 1.00, ">= 1.00",
paste("= ", substring(as.character(format(round(p, 2), nsmall=2)), 2), sep="")))))
} else{
p <- ifelse(p < .001, "< .001***",
ifelse(p < .01, "< .01**",
ifelse(p < .05, "< .05*",
ifelse(p >= 1.00, ">= 1.00",
paste("= ", substring(as.character(format(round(p, 2), nsmall=2)), 2), "°", sep="")))))
}
}
round_p(p)
round_p <- function(p, add.stars=TRUE){
if(add.stars==FALSE){
p <- ifelse(p < .001, "< .001",
ifelse(p < .01, "< .01",
ifelse(p < .05, "< .05",
ifelse(p >= 1.00, ">= 1.00",
paste("= ", substring(as.character(format(round(p, 2), nsmall=2)), 2), sep="")))))
} else{
p <- ifelse(p < .001, "< .001***",
ifelse(p < .01, "< .01**",
ifelse(p < .05, "< .05*",
ifelse(p >= 1.00, ">= 1.00",
paste("= ", substring(as.character(format(round(p, 2), nsmall=2)), 2), "°", sep="")))))
}
return(p)
}
round_p(p)
round_p <- function(p, add.stars=TRUE){
if(add.stars==FALSE){
p <- ifelse(p < .001, "< .001",
ifelse(p < .01, "< .01",
ifelse(p < .05, "< .05",
ifelse(p >= 0.1, ">= 0.1",
paste("= ", substring(as.character(format(round(p, 2), nsmall=2)), 2), sep="")))))
} else{
p <- ifelse(p < .001, "< .001***",
ifelse(p < .01, "< .01**",
ifelse(p < .05, "< .05*",
ifelse(p >= 0.1, ">= 0.1",
paste("= ", substring(as.character(format(round(p, 2), nsmall=2)), 2), "°", sep="")))))
}
return(p)
}
round_p(p)
round_p(0.07)
round_p(0.04)
round_p(0.02)
round_p(0.005)
source("format_p.R")
APAze <- function(fit, method="boot", nsim=1000, ddf=NULL){
varsnames <- all.vars(terms(fit))
# lme4 and lmerTest -----------------------------------------------------------------
if(class(fit)[1]=="lmerMod" | class(fit)[1]=="merModLmerTest"){
R2 <- MuMIn::r.squaredGLMM(fit)
confint <- confint(fit, method=method, nsim=nsim, oldNames=F)
# It would be nice to have this to automatically switch to Wald estimation
# of confint in the case of eventual warnings. But I have no idea how
# to catch those...
if(!is.null(ddf) & inherits(fit, "merModLmerTest")){
coefs <- data.frame(coef(summary(fit, ddf=ddf)))
}else{
coefs <- data.frame(coef(summary(fit)))
}
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
if(inherits(fit, "glmerMod")){
p_list <- coefs$Pr...z..
} else if("Pr...t.." %in% colnames(coefs)){
p_list <- coefs$Pr...t..
}else{
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
}
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value","z.value"))]
coefs <- round(coefs,2)
# coefs$p <- round(p_list,3)
#
#   p <- ifelse(coefs$p < .001, "< .001",
#               ifelse(coefs$p < .01, "< .01",
#                      ifelse(coefs$p < .05, "< .05",
#                             ifelse(coefs$p >= 1.00, ">= 1.00",
#                             paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
coefs$p <- format_p(p_list)
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" successfully converged and explained ",
substring(as.character(format(round(R2[2], 2), nsmall=2)), 3),
"% of the variance of the endogen (the conditional R2). ",
"The variance explained by the fixed effects was of ",
substring(as.character(format(round(R2[1], 2), nsmall=2)), 3),
"% (the marginal R2) and the one explained by the random effects of ",
substring(as.character(format(round(R2[2]-R2[1], 2), nsmall=2)), 3),
"%.", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
# Else --------------------------------------------------------------------
else if(class(fit)[1]=="lm"){
confint <- confint(fit)
coefs <- data.frame(coef(summary(fit)))
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value"))]
coefs <- round(coefs,2)
coefs$p <- round(p_list,3)
p <- ifelse(coefs$p < .001, "< .001",
ifelse(coefs$p < .01, "< .01",
ifelse(coefs$p < .05, "< .05",
ifelse(coefs$p >= 1.00, ">= 1.00",
paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" explained ",
substring(as.character(format(round(summary(fit)$r.squared, 2), nsmall=2)), 3),
"% of the variance of the endogen (R2).", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
else{
print(paste("Function not available yet for object of class", class(fit)[1]))
}
}
library(neuropsychology)
library(lmerTest)
fit_lmer <- lme4::lmer(Age~BMI + (1|Sex), data=personality)
fit_lmertest <- lmerTest::lmer(Age~BMI + (1|Sex), data=personality)
APAze(fit_lmer, method="Wald")
APAze(fit_lmertest, method="Wald")
APAze(lm(Age~BMI,data=personality))
APAze <- function(fit, method="boot", nsim=1000, ddf=NULL){
varsnames <- all.vars(terms(fit))
# lme4 and lmerTest -----------------------------------------------------------------
if(class(fit)[1]=="lmerMod" | class(fit)[1]=="merModLmerTest"){
R2 <- MuMIn::r.squaredGLMM(fit)
confint <- confint(fit, method=method, nsim=nsim, oldNames=F)
# It would be nice to have this to automatically switch to Wald estimation
# of confint in the case of eventual warnings. But I have no idea how
# to catch those...
if(!is.null(ddf) & inherits(fit, "merModLmerTest")){
coefs <- data.frame(coef(summary(fit, ddf=ddf)))
}else{
coefs <- data.frame(coef(summary(fit)))
}
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
if(inherits(fit, "glmerMod")){
p_list <- coefs$Pr...z..
} else if("Pr...t.." %in% colnames(coefs)){
p_list <- coefs$Pr...t..
}else{
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
}
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value","z.value"))]
coefs <- round(coefs,2)
# coefs$p <- round(p_list,3)
#
#   p <- ifelse(coefs$p < .001, "< .001",
#               ifelse(coefs$p < .01, "< .01",
#                      ifelse(coefs$p < .05, "< .05",
#                             ifelse(coefs$p >= 1.00, ">= 1.00",
#                             paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
p <- format_p(p_list)
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" successfully converged and explained ",
substring(as.character(format(round(R2[2], 2), nsmall=2)), 3),
"% of the variance of the endogen (the conditional R2). ",
"The variance explained by the fixed effects was of ",
substring(as.character(format(round(R2[1], 2), nsmall=2)), 3),
"% (the marginal R2) and the one explained by the random effects of ",
substring(as.character(format(round(R2[2]-R2[1], 2), nsmall=2)), 3),
"%.", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
# Else --------------------------------------------------------------------
else if(class(fit)[1]=="lm"){
confint <- confint(fit)
coefs <- data.frame(coef(summary(fit)))
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value"))]
coefs <- round(coefs,2)
#     coefs$p <- round(p_list,3)
#
#     p <- ifelse(coefs$p < .001, "< .001",
#                 ifelse(coefs$p < .01, "< .01",
#                        ifelse(coefs$p < .05, "< .05",
#                               ifelse(coefs$p >= 1.00, ">= 1.00",
#                                      paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
p <- format_p(p_list)
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" explained ",
substring(as.character(format(round(summary(fit)$r.squared, 2), nsmall=2)), 3),
"% of the variance of the endogen (R2).", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
else{
print(paste("Function not available yet for object of class", class(fit)[1]))
}
}
APAze(lm(Age~BMI,data=personality))
APAze(fit_lmer, method="Wald")
APAze(fit_lmertest, method="Wald")
library(neuropsychology)
APAze(glm(Age~Mood_Disorder,data=personality))
APAze(lm(Age~BMI,data=personality))
library(lmerTest)
fit_lmer <- lme4::lmer(Age~BMI + (1|Sex), data=personality)
fit_lmertest <- lmerTest::lmer(Age~BMI + (1|Sex), data=personality)
APAze(fit_lmer, method="Wald")
APAze(fit_lmertest, method="Wald")
round_p(0.06)
