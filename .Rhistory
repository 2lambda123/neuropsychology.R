variable <- as.vector(df[variable])
}
if (is.null(by)){
print("ok")
#     description <- data.frame(mean = mean(variable, na.rm=TRUE),
#                               sd = sd(variable, na.rm=TRUE))
}
return(variable)
}
a <- describe("BMI", df)
typeof(a)
describe <- function(variable, df=NULL, by=NULL){
if (is.null(df)==TRUE){
df <- data.frame(variable=variable)
}
if (is.null(by)){
print("ok")
#     description <- data.frame(mean = mean(variable, na.rm=TRUE),
#                               sd = sd(variable, na.rm=TRUE))
}
return(variable)
}
a <- describe("BMI", df)
a
a <- describe(df$BMI)
a
describe <- function(variable, df=NULL, by=NULL){
if (is.null(df)==TRUE){
df <- data.frame(variable=variable)
}
if (is.null(by)){
description <- data.frame(mean = mean(df[variable], na.rm=TRUE),
sd = sd(df[variable], na.rm=TRUE))
}
return(description)
}
a <- describe("BMI", df)
a <- describe(df$BMI)
describe <- function(variable, df=NULL, by=NULL){
if (is.null(df)==TRUE){
df <- data.frame(variable=variable)
}
if (is.null(by)){
description <- data.frame(mean = mean(df[variable], na.rm=TRUE),
sd = sd(df[variable], na.rm=TRUE))
}
return(description, variable)
}
a <- describe("BMI", df)
describe <- function(variable, df=NULL, by=NULL){
if (is.null(df)==TRUE){
df <- data.frame(variable=variable)
}
if (is.null(by)){
description <- data.frame(mean = mean(df[variable], na.rm=TRUE),
sd = sd(df[variable], na.rm=TRUE))
}
return(df)
}
a <- describe(df$BMI)
eval(df$BMI)
describe <- function(variable, df=NULL, by=NULL){
if (is.null(df)==TRUE){
df <- data.frame(variable=eval(variable))
}
if (is.null(by)){
description <- data.frame(mean = mean(df[variable], na.rm=TRUE),
sd = sd(df[variable], na.rm=TRUE))
}
return(df)
}
a <- describe(df$BMI)
describe <- function(variable, df=NULL, by=NULL){
if (is.null(df)==TRUE){
df <- data.frame(var=eval(variable))
}
if (is.null(by)){
description <- data.frame(mean = mean(df[variable], na.rm=TRUE),
sd = sd(df[variable], na.rm=TRUE))
}
return(df)
}
describe <- function(variable, df=NULL, by=NULL){
if (is.null(df)==TRUE){
df <- data.frame(var=eval(variable))
}
if (is.null(by)){
description <- data.frame(mean = mean(df[var], na.rm=TRUE),
sd = sd(df[var], na.rm=TRUE))
}
return(df)
}
a <- describe(df$BMI)
describe <- function(variable, df=NULL, by=NULL){
if (is.null(df)==TRUE){
df <- data.frame(var=eval(variable))
}
#   if (is.null(by)){
#     description <- data.frame(mean = mean(df[var], na.rm=TRUE),
#                               sd = sd(df[var], na.rm=TRUE))
#   }
return(df)
}
a <- describe(df$BMI)
a
View(a)
describe <- function(variable, df=NULL, by=NULL){
if (is.null(df)==TRUE){
df <- data.frame(var=eval(variable))
}
else {
df <- df[variable]
}
#   if (is.null(by)){
#     description <- data.frame(mean = mean(df[var], na.rm=TRUE),
#                               sd = sd(df[var], na.rm=TRUE))
#   }
return(df)
}
a <- describe(df$BMI)
a <- describe("BMI", df)
a
View(a)
describe <- function(variable, df=NULL, by=NULL){
if (is.null(df)==TRUE){
df <- data.frame(var=eval(variable))
}
else {
df <- data.frame(var=df[variable])
}
#   if (is.null(by)){
#     description <- data.frame(mean = mean(df[var], na.rm=TRUE),
#                               sd = sd(df[var], na.rm=TRUE))
#   }
return(df)
}
a <- describe("BMI", df)
a <- describe(df$BMI)
a <- describe("BMI", df)
View(a)
a <- describe("BMI", df)
View(a)
a <- describe(df$BMI)
View(a)
describe <- function(variable, df=NULL, by=NULL){
if (is.null(df)==TRUE){
df <- data.frame(var=eval(variable))
}
else {
df <- data.frame(var=eval(df[variable]))
}
#   if (is.null(by)){
#     description <- data.frame(mean = mean(df[var], na.rm=TRUE),
#                               sd = sd(df[var], na.rm=TRUE))
#   }
return(df)
}
a <- describe("BMI", df)
names(a)
describe <- function(variable, df=NULL, by=NULL){
if (is.null(df)==TRUE){
df <- data.frame(var=eval(variable))
} else {
df <- data.frame(var=eval(df[variable]))
}
#   if (is.null(by)){
#     description <- data.frame(mean = mean(df[var], na.rm=TRUE),
#                               sd = sd(df[var], na.rm=TRUE))
#   }
return(df)
}
a <- describe("BMI", df)
names(a)
a <- describe(df$BMI)
names(a)
library(dplyr)
install.packages("tibble")
library(dplyr)
describe <- function(df, var, by=NULL){
if (is.null(by)==FALSE){
description <- df %>%
group_by(parse(by)) %>%
summarize(
mean = mean(df[var], na.rm=TRUE),
sd = sd(df[var], na.rm=TRUE)
)
}
else {
description <- data.frame(mean = mean(df[var], na.rm=TRUE),
sd = sd(df[var], na.rm=TRUE))
}
return(description)
}
describe(df, "BMI")
describe(df, "BMI", "Sex")
describe <- function(df, var, by=NULL){
if (is.null(by)==FALSE){
description <- df %>%
group_by(parse(by)) %>%
summarize(
mean = mean(df[var], na.rm=TRUE),
sd = sd(df[var], na.rm=TRUE)
)
}
else {
description <- data.frame(mean = mean(df[var], na.rm=TRUE),
sd = sd(df[var], na.rm=TRUE))
}
return(description)
}
describe(df, "BMI")
describe <- function(df, var, by=NULL){
if (is.null(by)==FALSE){
print('1')
description <- df %>%
group_by(parse(by)) %>%
summarize(
mean = mean(df[var], na.rm=TRUE),
sd = sd(df[var], na.rm=TRUE)
)
}
else {
print('2')
description <- data.frame(mean = mean(df[var], na.rm=TRUE),
sd = sd(df[var], na.rm=TRUE))
}
return(description)
}
describe(df, "BMI")
by="Sex"
var="BMI"
description <- df %>%
group_by(parse(by)) %>%
summarize(
mean = mean(df[var], na.rm=TRUE),
sd = sd(df[var], na.rm=TRUE)
)
description <- df %>%
group_by(by) %>%
summarize(
mean = mean(df[var], na.rm=TRUE),
sd = sd(df[var], na.rm=TRUE)
)
description <- df %>%
group_by(eval(by)) %>%
summarize(
mean = mean(df[var], na.rm=TRUE),
sd = sd(df[var], na.rm=TRUE)
)
description <- df %>%
group_by(Sex) %>%
summarize(
mean = mean(df[var], na.rm=TRUE),
sd = sd(df[var], na.rm=TRUE)
)
description <- df %>%
dplyr::group_by(Sex) %>%
summarise(
mean = mean(df[var], na.rm=TRUE),
sd = sd(df[var], na.rm=TRUE)
)
description <- df %>%
group_by(Sex) %>%
summarise(
mean = mean(df[var], na.rm=TRUE),
sd = sd(df[var], na.rm=TRUE)
)
df
summary(df$Sex)
description <- df %>%
group_by(Sex) %>%
summarise(
mean = mean(BMI, na.rm=TRUE),
sd = sd(BMI, na.rm=TRUE)
)
description <- df %>%
group_by(Sex) %>%
summarise(
mean = mean(parse(var), na.rm=TRUE),
sd = sd(parse(var), na.rm=TRUE)
)
description <- df %>%
group_by(Sex) %>%
summarise(
mean = mean(paste(var), na.rm=TRUE),
sd = sd(paste(var), na.rm=TRUE)
)
description <- df %>%
group_by(Sex) %>%
summarise(
mean = mean(eval(var), na.rm=TRUE),
sd = sd(eval(var), na.rm=TRUE)
)
description <- df %>%
group_by(Sex) %>%
summarise(
mean = mean(deparse(var), na.rm=TRUE),
sd = sd(deparse(var), na.rm=TRUE)
)
description <- df %>%
group_by(Sex) %>%
summarise(
mean = mean(substitute(var), na.rm=TRUE),
sd = sd(substitute(var), na.rm=TRUE)
)
description <- df %>%
group_by(Sex) %>%
summarise(
mean = mean(expression(var), na.rm=TRUE),
sd = sd(expression(var), na.rm=TRUE)
)
description <- df %>%
group_by(Sex) %>%
summarise(
mean = mean(paste(var), na.rm=TRUE),
sd = sd(paste(var), na.rm=TRUE)
)
description <- df %>%
group_by(Sex) %>%
summarise(
mean = mean(parse(var), na.rm=TRUE),
sd = sd(parse(var), na.rm=TRUE)
)
description <- df %>%
group_by(Sex) %>%
summarise(
mean = mean(var, na.rm=TRUE),
sd = sd(var, na.rm=TRUE)
)
sessionInfo()
library(ggcorrplot)
sessionInfo()
library(installR)
install.packages("installr")
library(installR)
library(installr)
updateR()
updateR()
library(neuropsychology)
cortable <- function(df,
correction="holm",
type="pearson",
print.result=TRUE,
plot.result=TRUE){
type <- ifelse(type == "s", "spearman",
ifelse(type == "spearman", "spearman","pearson"))
for (i in names(df)){
if (is.numeric(df[,i]) == FALSE){
df[,i] = NULL
}
}
dimnames <- names(df)
df <- as.matrix(df)
R <- rcorr(df, type = type)$r
p <- rcorr(df, type = type)$P
p <- p.adjust(p, method = correction)
p.mat <- matrix(p, ncol = ncol(R), dimnames = list(dimnames,dimnames))
## define notions for significance levels; spacing is important.
mystars <- ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "* ", " ")))
## trunctuate the matrix that holds the correlations to two decimal
R <- format(round(cbind(rep(-1.11, ncol(df)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
table <- matrix(paste(R, mystars, sep=""), ncol=ncol(df))
diag(table) <- paste(diag(R), " ", sep="")
rownames(table) <- colnames(df)
colnames(table) <- paste(colnames(df), "", sep="")
## remove upper triangle
table <- as.matrix(table)
table[upper.tri(table, diag = TRUE)] <- NA
table <- as.data.frame(table)
## remove last column and return the matrix (which is now a data frame)
table <- cbind(table[1:length(table)-1])
if (print.result==TRUE){
print(paste("A ", type, "'s correlation matrix (correction: ", correction, ")", sep = ""))
print(table)
}
if (plot.result==TRUE){
print(ggcorrplot(rcorr(df, type = type)$r,
title = paste("A ", type, "'s correlation matrix (correction: ", correction, ")", sep = ""),
method = "circle",
type="lower",
colors=c("#E91E63", "white", "#03A9F4"),
hc.order = TRUE,
p.mat = p.mat,
insig="pch",
legend.title="",
lab = FALSE))
}
return(as.data.frame(table))
}
cortable(personality)
cortable <- function(df,
correction="holm",
type="pearson",
print.result=TRUE,
plot.result=TRUE){
type <- ifelse(type == "s", "spearman",
ifelse(type == "spearman", "spearman","pearson"))
correction_text <- ifelse(correction=="holm", "Holmâ€“Bonferroni",
ifelse(correction=="fdr", "False Discovery Rate",correction))
for (i in names(df)){
if (is.numeric(df[,i]) == FALSE){
df[,i] = NULL
}
}
dimnames <- names(df)
df <- as.matrix(df)
R <- rcorr(df, type = type)$r
p <- rcorr(df, type = type)$P
p <- p.adjust(p, method = correction)
p.mat <- matrix(p, ncol = ncol(R), dimnames = list(dimnames,dimnames))
## define notions for significance levels; spacing is important.
mystars <- ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "* ", " ")))
## trunctuate the matrix that holds the correlations to two decimal
R <- format(round(cbind(rep(-1.11, ncol(df)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
table <- matrix(paste(R, mystars, sep=""), ncol=ncol(df))
diag(table) <- paste(diag(R), " ", sep="")
rownames(table) <- colnames(df)
colnames(table) <- paste(colnames(df), "", sep="")
## remove upper triangle
table <- as.matrix(table)
table[upper.tri(table, diag = TRUE)] <- NA
table <- as.data.frame(table)
## remove last column and return the matrix (which is now a data frame)
table <- cbind(table[1:length(table)-1])
if (print.result==TRUE){
print(paste("A ", type, "'s correlation matrix (correction: ", correction, ")", sep = ""))
print(table)
}
if (plot.result==TRUE){
print(ggcorrplot(rcorr(df, type = type)$r,
title = paste("A ", type, "'s correlation matrix (correction: ", correction, ")", sep = ""),
method = "circle",
type="lower",
colors=c("#E91E63", "white", "#03A9F4"),
hc.order = TRUE,
p.mat = p.mat,
insig="pch",
legend.title="",
lab = FALSE))
}
return(as.data.frame(table))
}
cortable(personality)
cortable <- function(df,
correction="holm",
type="pearson",
print.result=TRUE,
plot.result=TRUE){
type <- ifelse(type == "s", "spearman",
ifelse(type == "spearman", "spearman","pearson"))
correction_text <- ifelse(correction=="holm", "Holmâ€“Bonferroni",
ifelse(correction=="fdr", "False Discovery Rate",correction))
for (i in names(df)){
if (is.numeric(df[,i]) == FALSE){
df[,i] = NULL
}
}
dimnames <- names(df)
df <- as.matrix(df)
R <- rcorr(df, type = type)$r
p <- rcorr(df, type = type)$P
p <- p.adjust(p, method = correction)
p.mat <- matrix(p, ncol = ncol(R), dimnames = list(dimnames,dimnames))
## define notions for significance levels; spacing is important.
mystars <- ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "* ", " ")))
## trunctuate the matrix that holds the correlations to two decimal
R <- format(round(cbind(rep(-1.11, ncol(df)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
table <- matrix(paste(R, mystars, sep=""), ncol=ncol(df))
diag(table) <- paste(diag(R), " ", sep="")
rownames(table) <- colnames(df)
colnames(table) <- paste(colnames(df), "", sep="")
## remove upper triangle
table <- as.matrix(table)
table[upper.tri(table, diag = TRUE)] <- NA
table <- as.data.frame(table)
## remove last column and return the matrix (which is now a data frame)
table <- cbind(table[1:length(table)-1])
if (print.result==TRUE){
print(paste("A ", type, "'s correlation matrix (correction: ", correction_text, ")", sep = ""))
print(table)
}
if (plot.result==TRUE){
print(ggcorrplot(rcorr(df, type = type)$r,
title = paste("A ", type, "'s correlation matrix (correction: ", correction_text, ")", sep = ""),
method = "circle",
type="lower",
colors=c("#E91E63", "white", "#03A9F4"),
hc.order = TRUE,
p.mat = p.mat,
insig="pch",
legend.title="",
lab = FALSE))
}
return(as.data.frame(table))
}
cortable(personality)
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R", dependencies=TRUE)
library(neuropsychology)
cortable(personality)
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R", dependencies=TRUE)
install.packages("devtools")
library(neuropsychology)
cortable(personality)
library(neuropsychology)
citation("neuropsychology")
