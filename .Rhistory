return(apa)
}
# Else --------------------------------------------------------------------
else if(class(fit)[1]=="lm"|class(fit)[1]=="glm"){
confint <- confint(fit)
coefs <- data.frame(coef(summary(fit)))
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value"))]
coefs <- round(coefs,2)
#     coefs$p <- round(p_list,3)
#
#     p <- ifelse(coefs$p < .001, "< .001",
#                 ifelse(coefs$p < .01, "< .01",
#                        ifelse(coefs$p < .05, "< .05",
#                               ifelse(coefs$p >= 1.00, ">= 1.00",
#                                      paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
p <- format_p(p_list, add.stars=add.stars)
if(class(fit)[1]=="lm"){
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" explained ",
substring(as.character(format(round(summary(fit)$r.squared, 2), nsmall=2)), 3),
"% of the variance of the endogen (R2).", sep="")
}else{R2_apa <- paste("AIC =",as.character(round(fit$aic, 2)))}
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}else{
print(paste("Function not available yet for object of class", class(fit)[1]))
}
}
fit <- glm(Age~Mood_Disorder,data=personality)
APAze(fit)
fit <- lm(Age~BMI,data=personality)
APAze(fit)
library(neuropsychology)
library(neuropsychology)
textcloud <- function(pdf.file=".",
words=NULL,
frequency=NULL,
word.length.min=4,
word.length.max=Inf,
freq.min=10,
freq.max=Inf,
image="brain1",
text.size=0.5){
if(is.null(words)==FALSE){
data <- data.frame(word=words)
if(is.null(frequency)){
data$freq <- 1
}else{
data$freq <- frequency
}
}else if(is.null(pdf.file)==FALSE){
data <- extract_text(pdf.file)
}else{
print("No correct input. Check ?textcloud")
}
if(is.null(image)==FALSE){
png::writePNG(neuropsychology::masks[[image]], "img.png")
}
cloud <- wordcloud2::wordcloud2(data=data,
size=text.size,
figPath="img.png")
if(is.null(image)==FALSE){
unlink("img.png")
}
return(cloud)
}
textcloud(words=c("here", "is", "some", "random", "words"))
setwd("D:/Programs/Dropbox/RECHERCHE/DOCUMENTS/R_packages/neuropsychology.R")
setwd("D:/Programs/Dropbox/RECHERCHE/DOCUMENTS/R_packages/datasets")
library(png)
head2 <- readPNG("head.png")
brain2 <- readPNG("brain.png")
head1 <- readPNG("head2.png")
brain1 <- readPNG("brain2.png")
masks <- list("brain1"=brain1, "brain2"=brain2, "head1"=head1, "head2"=head2)
save(masks, file="masks.rda", compress="bzip2")
install.packages("Rtools")
install.packages(BayesFactor)
install.packages("BayesFactor")
sessionInfo()
library(BayesFactor)
sessionInfo()
install.packages("digest")
library("devtools")
install_github("neuropsychology/neuropsychology.R")
library("devtools")
install_github("neuropsychology/neuropsychology.R", force=TRUE)
packrat::init()
document()
library(devtools)
document()
install.packages("testthat")
document()
library(neuropsychology)
setwd("D:/Programs/Dropbox/RECHERCHE/DOCUMENTS/R_packages/neuropsychology.R")
setwd("D:/Programs/Dropbox/RECHERCHE/DOCUMENTS/R_packages/neuropsychology.R")
library(neuropsychology)
library(neuropsychology)
library(neuropsychology)
install.packages("rto")
library(caret)
?predict
install.packages("checkmate")
library(neuropsychology)
theme_classic() +
theme(
legend.position=legend.position,
legend.text = element_text(size=legend.text.size),
legend.title = element_blank(),
legend.key = element_blank(),
axis.title = element_text(size=axis.title.size),
axis.text.x = element_text(size=axis.text.size),
axis.text.y = element_text(size=axis.text.size),
axis.ticks = element_blank()
)
ggplot2::theme_classic() +
ggplot2::theme(
legend.position=legend.position,
legend.text = element_text(size=legend.text.size),
legend.title = element_blank(),
legend.key = element_blank(),
axis.title = element_text(size=axis.title.size),
axis.text.x = element_text(size=axis.text.size),
axis.text.y = element_text(size=axis.text.size),
axis.ticks = element_blank()
)
library(tidyverse)
ggplot2::theme_classic() +
ggplot2::theme(
legend.position=legend.position,
legend.text = element_text(size=legend.text.size),
legend.title = element_blank(),
legend.key = element_blank(),
axis.title = element_text(size=axis.title.size),
axis.text.x = element_text(size=axis.text.size),
axis.text.y = element_text(size=axis.text.size),
axis.ticks = element_blank()
)
ggplot2::theme_classic() +
ggplot2::theme(
legend.position=ggplot2::legend.position,
legend.text = ggplot2::element_text(size=legend.text.size),
legend.title = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
axis.title = ggplot2::element_text(size=axis.title.size),
axis.text.x = ggplot2::element_text(size=axis.text.size),
axis.text.y = ggplot2::element_text(size=axis.text.size),
axis.ticks = ggplot2::element_blank()
)
theme_neuropsychology <- function(legend.position="right",
legend.text.size=20,
axis.title.size=20,
axis.text.size=15){
ggplot2::theme_classic() +
ggplot2::theme(
legend.position=ggplot2::legend.position,
legend.text = ggplot2::element_text(size=legend.text.size),
legend.title = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
axis.title = ggplot2::element_text(size=axis.title.size),
axis.text.x = ggplot2::element_text(size=axis.text.size),
axis.text.y = ggplot2::element_text(size=axis.text.size),
axis.ticks = ggplot2::element_blank()
)
}
library(neuropsychology)
?desc
?arrange
?desc
library(neuropsychology)
df <- personality
df <- select_numeric(df)
n_total <- nrow(df)
variables <- colnames(df)
df <- df %>%
psych::describe() %>%
transmute(variable=variables,
missings=n_total - .$n,
prop_missings=.$missings/n_total,
mean=mean,
sd=sd,
median=median,
min=min,
max=max,
skew=skew,
kurtosis=kurtosis)
df[2:10] <- round(df[2:10], 2)
df <- personality
df <- select_numeric(df)
n_total <- nrow(df)
variables <- colnames(df)
df <- df %>%
psych::describe() %>%
transmute(variable=variables,
missings=n_total - "n",
prop_missings="missings"/n_total,
mean=mean,
sd=sd,
median=median,
min=min,
max=max,
skew=skew,
kurtosis=kurtosis)
df[2:10] <- round(df[2:10], 2)
df <- personality
df <- select_numeric(df)
n_total <- nrow(df)
variables <- colnames(df)
df <- df %>%
psych::describe() %>%
transmute_(variable=variables,
missings=n_total - "n",
prop_missings="missings"/n_total,
mean=mean,
sd=sd,
median=median,
min=min,
max=max,
skew=skew,
kurtosis=kurtosis)
df[2:10] <- round(df[2:10], 2)
df <- personality
df <- select_numeric(df)
n_total <- nrow(df)
variables <- colnames(df)
df <- df %>%
psych::describe() %>%
transmute_(variable=variables,
missings=n_total - n,
prop_missings=missings/n_total,
mean=mean,
sd=sd,
median=median,
min=min,
max=max,
skew=skew,
kurtosis=kurtosis)
df[2:10] <- round(df[2:10], 2)
df <- personality
df <- select_numeric(df)
n_total <- nrow(df)
variables <- colnames(df)
df <- df %>%
psych::describe() %>%
transmute(variable=variables,
missings=n_total - n,
prop_missings=missings/n_total,
mean=mean,
sd=sd,
median=median,
min=min,
max=max,
skew=skew,
kurtosis=kurtosis)
df[2:10] <- round(df[2:10], 2)
install.packages("devtools")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("tidyr")
install.packages("readr")
library(neuropsychology)
sessionInfo()
library(installr)
uninstall.R(3.0.0)
uninstall.R("3.0.0")
uninstall.R()
uninstall.R()
library(neuropsychology)
library(neuropsychology)
require(neuropsychology)
require(psych)
df <- select_numeric(personality)
fa <- psych::fa(df)
treshold=0
round=2
labels=NA
loadings <- fa$loadings %>%
unclass() %>%
as.data.frame()
loadings[abs(loadings) <= abs(treshold)] <- NA
# Save n factors
n_factors <- length(loadings)
# Add item labels
loadings$Item <- rownames(loadings)
if(length(labels)==nrow(loadings)){
} else {loadings$Label <- 1:nrow(loadings)}
# Keep Order
loadings$N <- 1:nrow(loadings)
# Select the max loading for each item
max <- loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading)) %>%
dplyr::arrange_(~Component, ~desc(Loading))
max <- dplyr::select_(~max, -Label)
max <- dplyr::select_(~max, setdiff(names(.), "Label"))
max <- dplyr::select_("max", setdiff(names(.), "Label"))
length(labels)!=nrow(loadings)
dplyr::select_("max", setdiff(names(.), "Label"))
library(dplyr)
dplyr::select_("max", setdiff(names(.), "Label"))
max <- dplyr::select_(max, setdiff(names(.), "Label"))
max <- dplyr::select_(max, setdiff(names("."), "Label"))
setdiff(names(.), "Label")
loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(~.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item)
max <- dplyr::select_(max, setdiff(names(~.), "Label"))
max <- loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(~.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading)) %>%
dplyr::arrange_(~Component, ~desc(Loading))
loadings <- fa$loadings %>%
unclass() %>%
as.data.frame()
loadings[abs(loadings) <= abs(treshold)] <- NA
# Save n factors
n_factors <- length(loadings)
# Add item labels
loadings$Item <- rownames(loadings)
if(length(labels)==nrow(loadings)){
} else {loadings$Label <- 1:nrow(loadings)}
# Keep Order
loadings$N <- 1:nrow(loadings)
max <- loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(~.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading)) %>%
dplyr::arrange_(~Component, ~desc(Loading))
max <- loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading)) %>%
dplyr::arrange_(~Component, ~desc(Loading))
max <- loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names("."), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading)) %>%
dplyr::arrange_(~Component, ~desc(Loading))
max <- loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(.dots), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading)) %>%
dplyr::arrange_(~Component, ~desc(Loading))
max <- dplyr::select_(max, setdiff(names(.), "Label"))
dplyr::select_(max, .dots="-Label")
loadings %>%
tidyr::gather_("Component", "Loading", .dots=c("-Label, -N, -Label")) %>% # setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading)) %>%
dplyr::arrange_(~Component, ~desc(Loading))
loadings <- dplyr::select(loadings, .dots="-Label")
max <- loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading)) %>%
dplyr::arrange_(~Component, ~desc(Loading))
max <- dplyr::select_(max, .dots="-Label")
loadings <- dplyr::select(loadings, .dots="-Label")
loadings
loadings <- dplyr::select_(loadings, .dots="-Label")
# Check loadings and remove those inferior to a treshold
loadings <- fa$loadings %>%
unclass() %>%
as.data.frame()
loadings[abs(loadings) <= abs(treshold)] <- NA
# Save n factors
n_factors <- length(loadings)
# Add item labels
loadings$Item <- rownames(loadings)
if(length(labels)==nrow(loadings)){
} else {loadings$Label <- 1:nrow(loadings)}
# Keep Order
loadings$N <- 1:nrow(loadings)
loadings %>%
tidyr::gather_("Component", "Loading", setdiff(c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item)
setdiff(3,4)
loadings %>%
tidyr::gather_("Component", "Loading", matches(Item)) %>% #setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item)
loadings %>%
tidyr::gather_("Component", "Loading", matches("Item")) %>% #setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item)
loadings %>%
tidyr::gather_("Component", "Loading", -matches("Item")) %>% #setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item)
loadings %>%
tidyr::gather_("Component", "Loading", -matches("Item"), -matches("N"), -matches("Label")) %>% #setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading)) %>%
dplyr::arrange_(~Component, ~desc(Loading))
loadings %>%
tidyr::gather_("Component", "Loading", -matches("Item"), -matches("N"), -matches("Label")) %>% #setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item)
loadings %>%
tidyr::gather_("Component", "Loading", -matches("Item"), -matches("N"), -matches("Label")) %>% #setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading))
loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
# tidyr::gather_("Component", "Loading", -matches("Item"), -matches("N"), -matches("Label")) %>% #setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item)
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", -matches("Item"), -matches("N"), -matches("Label")) %>% #setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item)
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", -matches(c("Item", "N", "Label"))) %>% #setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item)
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", .dots="-Item") %>% #setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item)
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", c("-Item", "N", "Label")) %>% #setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item)
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", c("Item", "N", "Label")) %>% #setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item)
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", -c("Item", "N", "Label")) %>% #setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item)
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", c("Item", "N", "Label")) %>% #setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item)
loadings
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", c("Item", "N", "Label"))
oadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", -c("Item", "N", "Label"))
t the max loading for each item
max <- loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", -c("Item", "N", "Label"))
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading")
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", ~c("Item", "N", "Label"))
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", ~c(Item, N, Label))
setdiff(names(.), c("Item", "N", "Label"))
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", dplyr::select(.dots="-Item"))
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", dplyr::select_(.dots="-Item"))
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", dplyr::select_vars(.dots="-Item"))
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", dplyr::select_vars_(.dots="-Item"))
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", dplyr::select_vars_(-matches("Item"))
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", dplyr::select_vars_(-matches("Item")))
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", dplyr::select_vars_(loadings, -matches("Item")))
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", dplyr::select_vars_(loadings, -matches("Item", "N", "Label")))
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", dplyr::select_vars_(loadings, -matches(c("Item", "N", "Label"))))
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", dplyr::select_vars_(loadings, -matches("Item")),
dplyr::select_vars_(loadings, -matches("N")),
dplyr::select_vars_(loadings, -matches("Label")))
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", dplyr::select_vars_(loadings, -matches("Item")),
dplyr::select_vars_(loadings, -matches("N")),
dplyr::select_vars_(loadings, -matches("Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading)) %>%
dplyr::arrange_(~Component, ~desc(Loading))
loadings %>%
# tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
tidyr::gather_("Component", "Loading", dplyr::select_vars_(loadings, -matches("Item")),
dplyr::select_vars_(loadings, -matches("N")),
dplyr::select_vars_(loadings, -matches("Label")))
loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label")))
