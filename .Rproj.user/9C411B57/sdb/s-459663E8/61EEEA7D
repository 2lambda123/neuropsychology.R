{
    "contents" : "APAze <- function(fit, method=\"boot\", nsim=1000, add.stars=TRUE, ddf=NULL){\n\n  varsnames <- all.vars(terms(fit))\n\n# lme4 and lmerTest -----------------------------------------------------------------\n  if(class(fit)[1]==\"lmerMod\" | class(fit)[1]==\"merModLmerTest\"){\n\n  R2 <- MuMIn::r.squaredGLMM(fit)\n  confint <- confint(fit, method=method, nsim=nsim, oldNames=F)\n  # It would be nice to have this to automatically switch to Wald estimation\n  # of confint in the case of eventual warnings. But I have no idea how\n  # to catch those...\n\n\n\n  if(!is.null(ddf) & inherits(fit, \"merModLmerTest\")){\n    coefs <- data.frame(coef(summary(fit, ddf=ddf)))\n  }else{\n    coefs <- data.frame(coef(summary(fit)))\n  }\n\n  coefs$CI25 <- tail(confint,nrow(coefs))[,1]\n  coefs$CI75 <- tail(confint,nrow(coefs))[,2]\n\n  if(inherits(fit, \"glmerMod\")){\n    p_list <- coefs$Pr...z..\n  } else if(\"Pr...t..\" %in% colnames(coefs)){\n    p_list <- coefs$Pr...t..\n  }else{\n    p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))\n  }\n\n  coefs <- coefs[,!(names(coefs) %in% c(\"Std..Error\",\"t.value\",\"z.value\"))]\n\n  coefs <- round(coefs,2)\n\n  # coefs$p <- round(p_list,3)\n#\n#   p <- ifelse(coefs$p < .001, \"< .001\",\n#               ifelse(coefs$p < .01, \"< .01\",\n#                      ifelse(coefs$p < .05, \"< .05\",\n#                             ifelse(coefs$p >= 1.00, \">= 1.00\",\n#                             paste(\"= \", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep=\"\")))))\n  p <- format_p(p_list, add.stars=add.stars)\n\n\n\n  R2_apa <- paste(\"The overall model predicting \",\n  varsnames[1],\n  \" successfully converged and explained \",\n  substring(as.character(format(round(R2[2], 2), nsmall=2)), 3),\n  \"% of the variance of the endogen (the conditional R2). \",\n  \"The variance explained by the fixed effects was of \",\n  substring(as.character(format(round(R2[1], 2), nsmall=2)), 3),\n  \"% (the marginal R2) and the one explained by the random effects of \",\n  substring(as.character(format(round(R2[2]-R2[1], 2), nsmall=2)), 3),\n  \"%.\", sep=\"\")\n\n  apa <- paste(\n    paste(rownames(coefs), \": \", sep=\"\"),\n    paste(\"(beta = \", as.character(coefs$Estimate), \",\", sep=\"\"),\n    paste(\" 95% CI [\", as.character(coefs$CI25), \", \", sep=\"\"),\n    paste(\"\", as.character(coefs$CI75), \"]\", sep=\"\"),\n    paste(\", p \", p, \")\", sep=\"\"),\n    sep=\"\"\n  )\n  apa <- c(R2_apa, apa)\n  return(apa)\n  }\n\n\n\n# Else --------------------------------------------------------------------\n  else if(class(fit)[1]==\"lm\"|class(fit)[1]==\"glm\"){\n    confint <- confint(fit)\n    coefs <- data.frame(coef(summary(fit)))\n    coefs$CI25 <- tail(confint,nrow(coefs))[,1]\n    coefs$CI75 <- tail(confint,nrow(coefs))[,2]\n    p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))\n    coefs <- coefs[,!(names(coefs) %in% c(\"Std..Error\",\"t.value\"))]\n\n    coefs <- round(coefs,2)\n#     coefs$p <- round(p_list,3)\n#\n#     p <- ifelse(coefs$p < .001, \"< .001\",\n#                 ifelse(coefs$p < .01, \"< .01\",\n#                        ifelse(coefs$p < .05, \"< .05\",\n#                               ifelse(coefs$p >= 1.00, \">= 1.00\",\n#                                      paste(\"= \", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep=\"\")))))\n    p <- format_p(p_list, add.stars=add.stars)\n\n    if(class(fit)[1]==\"lm\"){\n      R2_apa <- paste(\"The overall model predicting \",\n            varsnames[1],\n            \" explained \",\n            substring(as.character(format(round(summary(fit)$r.squared, 2), nsmall=2)), 3),\n            \"% of the variance of the endogen (R2).\", sep=\"\")\n  }else{R2_apa <- paste(\"AIC =\",as.character(round(fit$aic, 2)))}\n\n    apa <- paste(\n      paste(rownames(coefs), \": \", sep=\"\"),\n      paste(\"(beta = \", as.character(coefs$Estimate), \",\", sep=\"\"),\n      paste(\" 95% CI [\", as.character(coefs$CI25), \", \", sep=\"\"),\n      paste(\"\", as.character(coefs$CI75), \"]\", sep=\"\"),\n      paste(\", p \", p, \")\", sep=\"\"),\n      sep=\"\"\n    )\n    apa <- c(R2_apa, apa)\n    return(apa)\n\n  }else{\n    print(paste(\"Function not available yet for object of class\", class(fit)[1]))\n  }\n}\n\n",
    "created" : 1475401757121.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "665003005",
    "id" : "61EEEA7D",
    "lastKnownWriteTime" : 1475402426,
    "path" : "D:/Programs/Dropbox/RECHERCHE/DOCUMENTS/R_packages/neuropsychology.R/R/APAze.R",
    "project_path" : "R/APAze.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}